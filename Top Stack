module top(
    input CLK100MHZ,
    input start,
    input reset,
    input signal_in,
    input SW2,
    input SW3,
    output S2, S3,
    output [6:0] seg,
    output [3:0] an,
    output [15:0] LED,
    output rgb_output
);

    wire [2:0] rgb_output;
    reg [31:0] frequency;
    wire [31:0] red, green, blue;
    wire done_color;

    assign LED[2:0] = rgb_output;
    assign LED[3] = done_color;

    seven_segment_display ssd (
        .CLK100MHZ(CLK100MHZ),
        .frequency({5'b0, frequency}),
        .seg(seg),
        .an(an)
    );

    FrequencyToColorConverter f2 (
        .clk(CLK100MHZ),
        .reset(reset),
        .done_color(done_color),
        .red(red),
        .green(green),
        .blue(blue),
        .rgb_output(rgb_output)
    );

    ColorSensorStateMachine csm (
        .clk(CLK100MHZ),
        .reset(reset),
        .signal_in(signal_in),
        .done_color(done_color),
        .red(red),
        .green(green),
        .blue(blue),
        .S2(S2),
        .S3(S3)
    );

    always @(posedge CLK100MHZ) begin
        if (reset) begin
            frequency <= 0;
        end else if (SW2 == 1'b0 && SW3 == 1'b0) begin
            frequency <= red;
        end else if (SW2 == 1'b0 && SW3 == 1'b1) begin
            frequency <= green;
        end else if (SW2 == 1'b1 && SW3 == 1'b0) begin
            frequency <= blue;
        end else begin
            frequency <= 0;
        end
    end

    endmodule



