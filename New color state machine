module ColorSensorStateMachine(
    input clk,
    input reset,
    input signal_in,
    output reg done_color = 0,
    output reg [31:0] red = 0,
    output reg [31:0] green = 0,
    output reg [31:0] blue = 0,
    output reg S2 = 0,
    output reg S3 = 0,
    output reg [1:0] color_state = 0,
    output reg [29:0] color_sequence_flat = 30'b0, 
    output reg [3:0] color_count = 0,
    output reg [2:0] detected_color = 3'b000,      // Currently detected color
    output reg [2:0] initial_color = 3'b000,      // The initial color detected
    output reg initial_color_saved = 0,           // Flag to indicate the initial color is saved
    output reg pad_complete = 0,                  // Indicates when the entire pad has been read
    output [31:0] frequency,
    output done
);

    // Frequency measurement instance
    freq_meas f1 (
        .CLK100MHZ(clk),
        .signal_in(signal_in),
        .reset(reset),
        .frequency(frequency),
        .done(done)
    );

    localparam BLANK_STATE = 2'b00, RED_STATE = 2'b01, GREEN_STATE = 2'b10, BLUE_STATE = 2'b11;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset all registers and outputs
            red <= 0;
            green <= 0;
            blue <= 0;
            S2 <= 0;
            S3 <= 0;
            color_state <= BLANK_STATE;
            color_sequence_flat <= 30'b0;
            color_count <= 0;
            detected_color <= 3'b000;
            initial_color <= 3'b000;
            initial_color_saved <= 0;
            done_color <= 0;
            pad_complete <= 0;
        end else if (done) begin
            case (color_state)
                BLANK_STATE: begin
                    pad_complete <= 0; // Reset pad_complete at the start of detection
                    done_color <= 0;   // Reset the done flag
                    color_state <= RED_STATE;
                    S2 <= 1'b0;        // Select red photodiode
                    S3 <= 1'b0;
                end
                RED_STATE: begin
                    red <= frequency;
                    color_state <= GREEN_STATE;
                    S2 <= 1'b1;        // Select green photodiode
                    S3 <= 1'b1;

                    // Update detected color for red
                    if ((red > green + 100) && (red > blue + 100)) begin
                        detected_color <= 3'b100; // Red
                    end else begin
                        detected_color <= 3'b000; // No color
                    end
                end
                GREEN_STATE: begin
                    green <= frequency;
                    color_state <= BLUE_STATE;
                    S2 <= 1'b0;        // Select blue photodiode
                    S3 <= 1'b1;

                    // Update detected color for green
                    if ((green > red + 100) && (green > blue + 100)) begin
                        detected_color <= 3'b010; // Green
                    end else begin
                        detected_color <= 3'b000; // No color
                    end
                end
                BLUE_STATE: begin
                    blue <= frequency;
                    done_color <= 1;   // All color frequencies captured
                    color_state <= BLANK_STATE;
                    S2 <= 1'b0;
                    S3 <= 1'b0;

                    // Update detected color for blue
                    if ((blue > red + 100) && (blue > green + 100)) begin
                        detected_color <= 3'b001; // Blue
                    end else begin
                        detected_color <= 3'b000; // No color
                    end

                    // Save the initial color if it hasn't been saved yet
                    if (!initial_color_saved && detected_color != 3'b000) begin
                        initial_color <= detected_color;
                        initial_color_saved <= 1;
                    end

                    // Store detected color if valid
                    if (detected_color != 3'b000 && color_count < 10) begin
                        color_sequence_flat <= {color_sequence_flat[26:0], detected_color}; // Shift in new color
                        color_count <= color_count + 1;
                    end

                    // Check for end-of-pad condition (no new colors detected)
                    if (detected_color == 3'b000) begin
                        pad_complete <= 1; // Mark the pad as complete
                    end
                end
            endcase
        end
    end
endmodule

    
              
       
