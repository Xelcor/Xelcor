**Credit to T.Nguyen** - edited and succesfully implemented 

module pwm_generator (
   input wire clk,          // MHz clock
   input wire rst,          // Reset
   input box,                 // make this a switch on the board
   input wire [2:0] sw,     // Switch input for angle setting
   output reg pwm_out       // PWM output
);

   reg [27:0] counter;      // Counter for PWM generation
   reg [27:0] DS_1;         // Duty Cycle Setting
   reg temp_pwm_out;

   initial begin
       counter = 0;
       DS_1 = 0;
       temp_pwm_out = 0;
   end

   always @(posedge clk) begin

   if (counter >= 28'd2000000) counter <= 0;
           else  
               counter <= counter + 1;

   if (counter < DS_1)
       temp_pwm_out <=1;
   else
       temp_pwm_out <=0;
end
           
always @(*) begin
if (box==0) DS_1 <= 28'd180000;   // Default to Fully Open (9%)
else begin
   
           // Determine DS_1 based on switch settings
           case (sw)
               3'b000: DS_1 <= 28'd100000;    // Fully Closed (5%)
               3'b001: DS_1 <= 28'd140000;    // Partially Closed (7%)
               3'b010: DS_1 <= 28'd160000;    // Mostly Open (8%)
               3'b011: DS_1 <= 28'd180000;    // Fully Open (9%)
               default: DS_1 <= 28'd180000;   // Default to Fully Open (9%)
           endcase

           // Set PWM output based on counter and DS_1
           pwm_out <= temp_pwm_out;  // Start low, go high during duty cycle
       end
end
endmodule
