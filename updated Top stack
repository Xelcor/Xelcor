module top(
    input CLK100MHZ,
    input start,
    input signal_in,
    input SW2,
    input SW3,
    output S2, S3,
    output [6:0] seg,
    output [3:0] an,
    output [15:0] LED,
    output [2:0] rgb_output
);

    // Internal signals
    reg [31:0] frequency;
    wire [31:0] red, green, blue;
    wire done_color;
    wire pad_complete;
    wire [2:0] detected_color;
    wire [29:0] color_sequence_flat;
    wire [3:0] color_count;

    // Assign outputs
    assign rgb_output = detected_color; // Output the currently detected color
    assign LED[0] = detected_color[0];  // Detected color  (Blue)
    assign LED[1] = detected_color[1];  // Detected color middle bit (Green)
    assign LED[2] = detected_color[2];  // Detected color  (Red)
    assign LED[3] = done_color;         // Color detection cycle complete
    assign LED[4] = pad_complete;       // All colors detected (pad complete)

    // Debugging outputs for stored colors
   // Assign initial color to LEDs 
	assign LED[5] = initial_color[0]; // Initial color  (Blue)
	assign LED[6] = initial_color[1]; // Initial color  (Green)
	assign LED[7] = initial_color[2]; // Initial color  (Red)


    // Instantiate the ColorSensorStateMachine
    ColorSensorStateMachine csm (
        .clk(CLK100MHZ),
        .signal_in(signal_in),
        .done_color(done_color),
        .red(red),
        .green(green),
        .blue(blue),
        .S2(S2),
        .S3(S3),
        .color_sequence_flat(color_sequence_flat), // Detected color sequence
        .color_count(color_count),                 // Number of detected colors
        .detected_color(detected_color),           // Current detected color
        .pad_complete(pad_complete)                // All colors detected
    );

    // Logic for frequency selection (for debugging purposes on 7-segment display)
    always @(posedge CLK100MHZ) begin
        if (SW2 == 1'b0 && SW3 == 1'b0) begin
            frequency <= red;   // Display red frequency
        end else if (SW2 == 1'b0 && SW3 == 1'b1) begin
            frequency <= green; // Display green frequency
        end else if (SW2 == 1'b1 && SW3 == 1'b0) begin
            frequency <= blue;  // Display blue frequency
        end else begin
            frequency <= 0;     // Default to 0
        end
    end

    // Instantiate seven-segment display
    seven_segment_display ssd (
        .CLK100MHZ(CLK100MHZ),
        .frequency({5'b0, frequency}), // Display current frequency
        .seg(seg),
        .an(an)
    );

endmodule
